version: '3.7'
services:
  bstock-postgresql:
    container_name: bstock-postgresql
    image: postgres:15-alpine
    ports:
      - "15432:5432"
    restart: always  
    volumes:
      - ./bstock_dump.sql:/tmp/bstock_dump.sql
      - ./bstock_dump.sql:/docker-entrypoint-initdb.d/02_bstock_dump.sql
      - ./init.sql:/docker-entrypoint-initdb.d/01_init.sql  # 添加初始化腳本
   #   - ./postgresql.conf:/etc/postgresql/postgresql.conf
    shm_size: 2gb  
    networks:
      - big_stock_network   
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresql 
      POSTGRES_SHARED_BUFFERS: "256MB"  
  redis:
    image: redis:7.2.4
    container_name: redis
    restart: always 
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/etc/redis/redis.conf
    command: ["redis-server", "/etc/redis/redis.conf"]
    networks:
      - big_stock_network       
  redisinsight:
    image: redislabs/redisinsight:v2
    restart: always 
    container_name: redisinsight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    environment:
      LOG_LEVEL: "debug"  
    networks:
      - big_stock_network            
  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3.12.13-management
    restart: always 
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitmq   
    networks:
      - big_stock_network 
  consul:
    image: consul:1.7.3   
    restart: always 
    container_name: big_stock_consul
    ports:  
      - "8500:8500"
    networks:
      - big_stock_network    
  jaeger:
    image: jaegertracing/all-in-one:1.58.0
    restart: always 
    container_name: jaeger
    ports:
      - "5775:5775/udp"     # jaeger-agent
      - "6831:6831/udp"     # jaeger-agent
      - "6832:6832/udp"     # jaeger-agent
      - "5778:5778"         # jaeger-agent admin port
      - "16686:16686"       # jaeger-query
      - "14268:14268"       # jaeger-collector
      - "14250:14250"       # jaeger-collector
      - "9411:9411"         # Zipkin compatible endpoint
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "14269:14269"       # Jaeger metrics port for Prometheus
    networks:
      - big_stock_network    
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
      JAEGER_REPORTER_LOG_SPANS: "true"
      JAEGER_REPORTER_FLUSH_INTERVAL: "500"
      JAEGER_REPORTER_MAX_QUEUE_SIZE: "10000" 
      METRICS_BACKEND: prometheus
      METRICS_HTTP_ROUTE: /metrics
  traefik:
    image: traefik:v2.11.2
    restart: always 
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.metrics.address=:9090"  # 定义 metrics 入口点
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--providers.docker.constraints=Label(`traefik.enable`, `true`)"
    ports:
      - "30080:80"
      - "38080:8080" # Traefik Dashboard
      - "39090:9090" # Prometheus metrics
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - big_stock_network  
    labels:
      - "traefik.enable=true" 
      - "traefik.docker.network=big_stock_network"   #抓特定network的容器 
  prometheus:
    image: prom/prometheus:v2.52.0
    restart: always 
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "29090:9090"
    networks:
      - big_stock_network       
  postgres_exporter:
    restart: always 
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgresql@bstock-postgresql:5432/bstock?sslmode=disable"
    ports:
      - "39187:9187"
    networks:
      - big_stock_network   
  grafana:
    image: grafana/grafana:10.0.0-ubuntu
    restart: always 
    ports:
      - "3000:3000"
    volumes:
      - ./grafana_data:/var/lib/grafana  # 持久化數據  
    networks:
      - big_stock_network      
  rabbitmq_exporter :
    hostname: rabbitmqexporter
    image: kbudde/rabbitmq-exporter:1.0.0  
    restart: always 
    ports:
      - "9419:9419"
    environment:
      RABBIT_URL: http://rabbitmq:15672
      RABBIT_USER: admin
      RABBIT_PASSWORD: rabbitmq
    networks:
      - big_stock_network    
  redis_exporter:
    hostname: redisexporter
    image: oliver006/redis_exporter:v1.63.0
    restart: always 
    ports:
      - "9121:9121"
    environment:  
      REDIS_ADDR: redis://redis:6379
    networks:
      - big_stock_network     
networks:
  big_stock_network:
    external: true                  